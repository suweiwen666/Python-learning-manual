# -*- coding: UTF-8 -*-

'''
1.for循环和迭代器之间有什么关系？
---for循环会使用迭代协议来遍历迭代的对象中的每一个项。
for循环会在每次迭代中调用该对象的__next__方法（由next内置函数运行），而且会捕捉StopIteration异常，从而决定何时停止循环。
支持这种模式的任何对象，都可以用于for循环以及其他迭代环境中。

2.for循环和列表解析直接有什么关系？
---两者都是迭代工具。列表解析是执行常见for循环任务的简明并且高效的方法：对可迭代对象内所有元素应用一个表达式，并收集其结果。
你可以把列表解析转换成for循环，而列表解析表达式的一部分的语法看起来就像是for循环的首行。

3.举出Python中的4种迭代环境。
---Python中的迭代环境包括for循环、列表解析、map内置函数、in成员关系测试表达式以及内置函数sorted、sum、any和all。
这个分类也包括了内置函数list和tuple、字符串join方法以及序列赋值运算。所有这些都使用了迭代协议（next方法）来一次一个元素逐个遍历可迭代对象 。

4.如今从一个文本文件逐行读取行的最好的方法是什么？
---如今从文本文件中读取文本行的最佳方式是不要刻意去读取：其替代方法是，在迭代环境中打开文件，诸如for循环或列表解析中，
然后，让迭代工具在每次迭代中执行该文件的next方法，自动一次扫描一行。
从代码编写的简易性、执行速度以及内存空间需求等方面来看，这种做法通常都是最佳方式。

'''
if __name__ == '__main__':
    pass