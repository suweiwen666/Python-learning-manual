# -*- coding: UTF-8 -*-

'''
1.列举出两种能够扩展内置对象类型的方法？
---你可以在包装类中内嵌内置对象，或者直接做内置类型的子类。后者显得更简单，因为大多数原始的行为都被自动继承了。

2.函数修饰器是用来做什么的？
---函数修饰器通常是用来给现存的函数增加函数每次被调用时都会运行的一层逻辑。它们可以用来记录函数的日志或调用次数、检查参数的类型等。
它们同样可以用做“静态方法”（一个在类中的函数，不需要传入实例）。

3.怎样编写新式类？
---可以通过对对象的内置类（或者其他的内置类型）继承来编写新式类。
在Python3.0中，所有的类都将会自动成为新式类，因此不需要这么派生；在Python 2.6中，这样派生出来的类是新式类，那些没有派生的类是“经典类”。

4.新式类与经典类有何不同？
---新式类与多重继承树中的钻石搜索模式有所不同，它们实际上是以广度优先（横向）进行搜索的，而不是深度优先（向上）。
新式类还针对实例和类修改了type内置函数的结果，针对内置操作方法，没有运行__getattr__这样的通用属性获取方法，
并且支持包括特性、描述符和__slots__实例属性列表这样的一组高级额外工具。

5.正常方法和静态方法有何不同？
---正常（实例）方法会接受第一个self参数（隐含的实例），但是静态方法不是这样。
静态方法只是嵌套在类对象中的简单函数。为了使一个方法成为静态方法，它必须可以通过特殊的内置函数运行，或者使用装饰器进行装饰。
Python 3.0允许通过类而没有这个步骤就调用类中的简单函数，但是，通过实例调用仍然需要静态方法声明。

'''