# -*- coding: UTF-8 -*-

'''
1.模块包目录内的__init__.py文件有何用途？
---__init__.py文件是用于声明和初始化模块包的。第一次在进程中导入某目录时，Python会自动运行这个文件中的代码。其赋值的变量会变成对应于该目录在内存中所创建的模块对象的属性。
它不是选用的：如果一个目录中没有包含这个文件的话，是无法通过包语法导入目录的。

2.每次引用包的内容时，如何避免重复包的完整路径？
---通过from语句使用包，直接把包的变量名复制出来，或者使用import语句的as扩展功能，把路径改为较短的别名。在这种情况下，路径只出现在了一个地方，就在from或import语句中。

3.哪些目录需要__init__.py文件？
---import或from语句中所列出的每个目录都必须含有__init__.py文件。其他目录则不需要包含这个文件，包括含有包路径最左侧组件的目录。

4.在什么情况下必须通过import而不能通过from使用包？
---只有在你需要读取定义在一个以上路径的相同变量名时，才必须通过import来使用包，而不能使用from。使用import，路径可让引用独特化，然而，from却让任何变量名只有一个版本。

5.from mypkg import spam和from .import spam有什么差别？
---from mypkg import spam是绝对导入：mypkg的搜索掠过包路径并且mypkg位于sys.path中的一个绝对目录中。
另一方面，from.import spam是相对导入：spam的查找是相对于该语句所在的包，然后才会去搜索sys.path。
'''

if __name__ == '__main__':
    pass