# -*- coding: UTF-8 -*-

'''
1.什么是抽象超类？
---抽象类是会调用方法的类，但没有继承或定义该方法，而是期待该方法由子类填补。
当行为无法预测，非得等到更为具体的子类编写时才知道，通常可用这种方式把类通用化。
OOP软件框架也使用这种方式作为客户端定义、可定制的运算的实现方法。

2.当简单赋值语句出现在class语句顶层时，会发生什么？
---当简单赋值语句（X = Y）出现在类语句的顶层时，就会把数据属性附加在这个类上（Class.X）。就
像所有的类属性，这会由所有的实例共享。不过，数据属性并不是可调用的方法函数。

3.类为什么可能会需要手动调用超类中的__init__方法？
---如果类定义自身的__init__构造函数，但是也必须启用超类的构建其代码，就必须手动调用超类的__init__方法。
Python本身只会自动执行一个构造函数：树中最低的那个。
超类的构造函数是通过类名称来调用，手动传入self实例：Superclass.__init__ （self,...）。

4.怎样增强（而不是完全取代）继承的方法？
---要增强继承的方法而不是完全替代，还得在子类中进行重新定义，但是要从子类的新版方法中，手动回调超类版本的这个方法。
也就是，把self实例手动传给超类的版本的这个方法：Superclass.method（self,...）。


'''

