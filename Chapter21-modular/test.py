# -*- coding: UTF-8 -*-


'''
1.模块源代码文件是怎样变成模块对象的？
---模块的源代码文件在模块导入时，就会自动生成模块对象。从技术角度来讲，模块的源代码会在导入时运行，一次一条语句，而在这个过程中赋值的所有变量名都会生成模块对象的属性。

2.为什么需要设置PYTHONPATH环境变量？
---只需设置PYTHONPATH，从而可以从正在用的目录（也就是正在交互模式下使用的当前目录，或者包含顶层文件的目录）以外的其他目录进行导入。

3.举出模块导入搜索路径的四个主要组件。
---模块导入搜索路径的四个主要组件是顶层脚本的主目录（包含该文件的目录）、列在PYTHONPATH环境变量中的所有目录、标准链接库目录以及位于标准位置中.pth路径文件中的所有目录。
其中，程序员可以定制PYTHONPATH和.pth文件。

4.举出Python可能载入的能够响应import操作的四种文件类型。
---Python可能载入源代码文件（.py）、字节码文件（.pyc）、C扩展模块（例如，Linux的.so文件，以及Windows的.dll或.pyd）以及相同变量名的目录（用于包导入）。
导入也可以加载更罕见的东西，例如，ZIP文件组件、Python Jython版的Java类、IronPython的.NET组件以及没有文件形式的静态连接C扩展。有了导入钩子，导入可以加载任何东西。

5.什么是命名空间？模块的命名空间包含了什么？
---命名空间是一种独立完备的变量包，而变量就是命名空间对象的属性。模块的命名空间包含了代码在模块文件顶层赋值的所有变量名（也就是没有嵌套于def或class语句中）。
从技术角度上来讲，模块的全局作用域会变成模块对象的属性命名空间。模块的命名空间也会将其导入的其他文件中所做的赋值运算而发生变化，不过这不值得鼓励（参考第17章的相关内容）。


'''
if __name__ == '__main__':
    pass