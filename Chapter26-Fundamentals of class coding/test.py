# -*- coding: UTF-8 -*-
'''
1.类和模块之间有什么关系？
---类总是位于模块中；类是模块对象的属性。类和模块都是命名空间，但类对应于语句（而不是整个文件），而且支持多个实例、继承以及运算符重载这些OOP概念。
总之，模块就像是单个的实例类，没有继承，而且模块对应于整个文件的代码。

2.实例和类是如何创建的？
---类是通过运行class语句创建的；实例是像函数那样调用类来创建的。

3.类属性是在哪里创建的？是怎样创建的？
---类属性的创建是通过把属性赋值给类对象实现的。
类属性通常是由class语句中的顶层赋值语句而产生的：每个在class语句代码区中赋值的变量名，会变成类对象的属性（从技术角度来讲，class语句的作用域会变成类对象的属性的命名空间）。
不过，也可以于任何引用类对象的地方（在class语句外）对其属性赋值，从而也可以创建类属性。

4.实例属性是在哪里创建的？是怎样创建的？
---实例属性是通过对实例对象赋值属性来创建的。实例属性一般是在class语句中的类方法函数中对self参数（永远是隐含实例）赋值属性而创建的。
不过，你也可以在任何地方引用实例通过赋值语句来创建属性，即使是在class语句外。一般来说，所有实例属性都是在__init__构造函数中初始化的。
这样的话，之后的方法调用都可假设属性已经存在。

5.Python类中的self有什么意义？
----self通常是给与类方法函数中的第一个（最左侧）参数的名称；Python会自动填入实例对象（也就是方法调用的隐含的主体）。
这个参数不必叫self，其位置才是重点（C++或Java程序员可能更喜欢把它称作this，因为在这些语言中，该名称反应的是相同的概念。
不过，在Python中，这个参数总是需要明确的）。

6.Python类中如何编写运算符重载？
---Python类中的运算符重载是用特定名称的方法写成的。这些方法的开头和结尾都是双下划线，通过这种办法使其变得独特。这些不是内置或保留字。
当实例出现在相应的运算中时，Python就会自动执行它们。Python为这些运算和特殊方法的名称定义了对应关系。

7.什么时候可能在类中支持运算符重载？
---运算符重载可用于实现模拟内置类型的对象（例如，序列或像矩阵这样的数值对象），以及模拟代码中所预期的内置类型接口。
模拟内置类型的接口可让你传入具有状态信息（也就是记住操作调用之间数据的属性）的类实例。不过，当简单命名的方法就够用时，不应该使用运算符重载。

8.哪个运算符重载方法是最常用的？
---__init__构造函数是最常用的。几乎每个类都使用这个方法为实例属性进行初始化，以及执行其他的启动任务。

9.Python OOP程序代码中最重要的两个概念是什么？
---方法函数中的特殊self参数和__init__构造函数是Python中OOP的两个基石。

'''


