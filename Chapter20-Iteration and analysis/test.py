# -*- coding: UTF-8 -*-

'''
1.列表解析放在方括号和圆括号中有什么区别？
---方括号中的列表解析会一次在内存中产生结果列表。当位于圆括号中时，实际上是生成器表达式：它们有类似的意义，但不会一次产生结果列表。
与之相对比的是，生成器表达式会返回一个生成器对象，用在迭代环境中时，一次产生结果中的一个元素。

2.生成器和迭代器有什么关系？
---生成器是支持迭代协议的对象：它们有__next__方法，重复前进到系列结果中的下个元素，以及到系列尾端时引发例外事件。
在Python中，我们可以用def、加圆括号的列表解析的生成器表达式以及以类定义特殊方法__iter__来创建生成器对象（本书稍后讨论），通过它们来编写生成器函数。

3.如何分辨函数是否为生成器函数？
---生成器函数在其代码中的某处会有一个yield语句。除此之外，生成器函数和普通函数语法上相同，但是，它们由Python特别编译，以便在调用的时候返回一个可迭代的对象。

4.yield语句是做什么的？
---当有了yield语句时，这个语句会让Python把函数特定的编译成生成器；当调用时，会返回生成器对象，支持迭代协议。
当yield语句运行时，会把结果返回给调用者，让函数的状态挂起。然后，当调用者再调用__next__方法时，这个函数就可以重新在上次yield语句后继续运行。
生成器也可以有return语句，用来终止生成器。

5.map调用和list comprehension有什么关系？比较并对比两者。
---map调用类似于列表解析，两者都会收集对序列或其他可迭代对象中每个元素应用运算后的结果（一次一个项目），从而创建新列表。
其主要差异在于，map会对每个元素应用函数，而列表解析则是应用任意的表达式。因此，列表解析更通用一些，可以像map那样应用函数调用表达式，
但是，map需要一个函数才能应用其他种类的表达式。列表解析也支持扩展语法，例如，嵌套for循环和if分句从而可以包含内置函数filter的功能。

'''
import time


def gensquares(n):
    for i in range(n):
        yield i**2
        time.sleep(1)

if __name__ == '__main__':
    for i in gensquares(5):
        print(i)
    pass