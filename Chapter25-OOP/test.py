# -*- coding: UTF-8 -*-


'''
1.Python的OOP的重要的意义是什么？
---OOP就是代码的重用：分解代码、最小化代码的冗余以及对现存的代码进行定制来编写程序，而不是实地修改代码，或者从头开始。

2.继承搜索在哪里查找属性？
---继承搜索会先在实例对象中寻找属性，然后才是创建实例的类，之后是所有较高的超类，由对象树底端到顶端，并且从左侧至右侧（默认）。
当属性首次找到时，搜索就会停止。因为在此过程中变量名的最低的版本会获胜，类的层次自然而然地支持了通过扩展进行代码的定制。

3.类对象和实例对象有什么不同？
---类和实例对象都是命名空间（由作为属性的变量的包）。两者间主要差别是，类是建立多个实例的工厂。
类也支持运算符重载方法，由实例继承，而且把其中的任何函数视为处理实例的特殊的方法。

4.为什么类方法函数中的第一个参数特殊？
---类方法函数中的第一个参数之所以特殊，是因为它总是接受将方法调用视为隐含主体的实例对象。按惯例，通常称为self。
因为方法函数默认总是有这个隐含的主体对象环境，所以我们说这是“面向对象”，也就是设计用来处理或修改对象的。

5.__init__方法是做什么用的？
---如果类中编写了或继承了__ init__方法，每次类实例创建时，Python会自动调用它。这也称为构造函数。除了明确传入类的名称的任何参数外，还会隐性的传入新实例。
这也是最常见的运算符重载方法。如果没有__ init__方法，实例刚创建时就是一个简单的空的命名空间。

6.怎样创建类实例？
---你可以调用类名称（就好像函数一样）来创建类实例。任何传给类名称的参数都要出现在__init__构造函数中第二和其后的参数。新的实例会记得创建它的类，从而可以实现继承目的。

7.怎样创建类？
---你可以运行 class语句来创建类。就像函数定义一样，这些语句在所在的模块文件导入时，一般就会运行（下一章会介绍）。

8.怎样定义类的超类？
---定义一个类的超类是通过在class语句的圆括号中将其列出，也就是在新的类名称后。类在圆括号中由左至右列出的顺序，会决定其在类树中由左至右的搜索的顺序。

'''
if __name__ == '__main__':
    pass