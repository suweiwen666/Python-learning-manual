# -*- coding: UTF-8 -*-


'''
1.说出异常处理的3个优点。
---异常处理对于错误处理、终止动作和事件通知有用。
它可以简化特殊情况的处理，并且可以用来实现替代的控制流程。
一般来讲，异常处理还可以减少程序所需的检测错误代码的数量，因为所有的错误都由处理器来过滤，你可能不需要测试每个操作的输出

2.如果你不想做任何特殊的事情来处理异常，那么异常会发生什么呢？
---任何未捕获的异常最终都流入默认的异常处理器，Python在程序的最顶端提供了它。这个处理器打印出类似的出错消息，并且退出程序。

3.如何从一个异常恢复你的脚本？
---如果你不想要默认消息和退出，可以编写try/except语句来捕获并从触发的异常恢复。一旦捕获了一个异常，该异常将终止，并且程序继续。

4.说出在脚本中触发异常的两种方式。
---raise和assert语句可以用来触发一个异常，就好像该异常已经由Python自身引发。原则上讲，我们可以通过生成一个程序错误来引发异常，但是，这通常不是一个明确的目标。

5.指出两种方式：不管异常是否发生，它们用来指定最终运行的行为。
---try/finally语句可以用来确保在一个代码块退出后执行的操作，而不管它是否会引发一个异常。
with/as语句也可以用来确保要运行的终止操作，但是，只有当处理的对象类型支持它的时候才可用。
'''