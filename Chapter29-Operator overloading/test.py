# -*- coding: UTF-8 -*-


'''
1.哪两种运算符重载方法可以用来支持类中的迭代？
---类可以通过定义（或继承）__getitem__ 或 __iter__来支持迭代。
在所有的迭代环境中，Python首先尝试使用__iter__（它返回支持迭代协议的一个对象，该对象带有一个__next__方法）：
如果在继承搜索中没有找到__iter__，Python退而求其次地用__getitem__索引方法（它可以重复地调用，使用连续较高的索引）。

2.哪两种运算符重载方法处理打印，并且在何种环境下处理？
---__str__和__repr__方法实现对象打印显示。
前者由print和str内置函数调用；后者由print和str调用（如果没有__str__的话），并且总是由repr内置函数、交互式响应和嵌套的出现。
也就是说，__repr__随处可用，只是当定义了一个__str__的时候除外。__str__通常用于用户友好的显示，__repr__给出额外的细节，或者对象的编码形式。

3.如何在类中拦截分片操作？
---分片由__getitem__索引方法捕获：它用一个分片对象调用；而不是一个简单的索引。
在Python 2.6中，__getslice__（在Python 3.0中删除了）也可以使用。

4.如何在类中捕获原处加法？
---原处加法首先尝试__iadd__，其次用__add__赋值。同样的模式对于所有的二进制运算也是如此。__radd__方法对于右端相加也可用。

5.何时应该提供运算符重载？
---当一个类自然地匹配的或者需要模拟一个内置类型接口的时候。
例如，集合可能模拟序列或映射接口。如果表达式运算符没有自然地映射对象的时候，我们通常不应该实现表达式运算符，而应该使用常规命名的方法。

'''